compiler=g++

IF os == "windows"
    output.file.name=foxmake.exe
ENDIF

IF os != "windows"
    output.file.name=foxmake
ENDIF

src.dir=../src
test.dir=../test
build.dir=build

build.files=FoxMakefile-Run

$debug_bin_dir=bin/Debug
$debug_obj_dir=obj/Debug
$debug_compiler_params=-Wall -fexceptions -g -std=c++17
$debug_linker_params=

$release_bin_dir=bin/Release
$release_obj_dir=obj/Release
$release_compiler_params=-Wall -fexceptions -O2 -std=c++17
$release_linker_params=-s -static

bin.dir=$($(target)_bin_dir)
obj.dir=$($(target)_obj_dir)
compiler.params=$($(target)_compiler_params)
linker.params=$($(target)_linker_params)

lib.dirs=
include.dirs=
libs=
#defines=

IF os != "windows"
    test.linker.params=-ldl -rdynamic
ENDIF

test.include.dirs=../include
test.libs=xutest

IF os == "windows"
    test.lib.dirs=../lib/windows
ENDIF
IF os != "windows"
    test.lib.dirs=../lib/linux
ENDIF

$project_name=foxmake

task copy showoutput;
task compile verbose;
task link verbose showoutput;

proc echo123
    echo 123
endproc

task compile after
    echo 000
    call echo123
    echo 456
endtask

task copy after
    echo Copia...
    call echo123

    @echo "abc"
    shellbegin
        IF os=="windows"
            if exist FoxMakefile-Run (
                echo O arquivo existe!
            ) else (
                echo O arquivo nao existe.
            )
        ENDIF
        IF os=="nowindows"
            if [ -f "FoxMakefile-Run" ]; then
                echo "O arquivo existe...!"
            else 
                echo "Arquivo nao existe: FoxMakefile-Run"
            fi
        ENDIF
    endshell

endtask

task debug before
    @dir
    echo Debug executado!
endtask

task finish after

    IF os == "windows"
        $lib_dir=$(working_dir)/../lib/windows
    ENDIF
    IF os == "nowindows"
        $lib_dir=$(working_dir)/../lib/linux
    ENDIF

    echo Lib dir: $(lib_dir)

    mkdir build/include

    cp -r $(src.dir)/**/io/*.h build/include
    cp $(src.dir)/*.cpp $(build.dir)
    mkdir $(build.dir)/objects
    cp $(obj.dir)/src/io/* $(build.dir)/objects

    cp $(lib_dir)/libxutest.a $(build.dir)/libtest.a
    cp ../include/xutest/xutest.h $(build.dir)/xutest.h
    cp ../include/xutest/xutest.h $(build.dir)/xutest.h

    cp -r $(src.dir) $(build.dir)/source

    cp -r ../../xutest/src/**/*.h build/include
    cp -r ../../xutest/src/**/*.h build/include

    rm $(build.dir)/objects/io.o
    rm $(build.dir)/ma*n.*
    rm $(build.dir)/lib*.*

    rm -r $(build.dir)/include/io/i*.*
    rm $(bin.dir)

    if os == "windows" then
        echo Windows!
    else
        echo Não é windows!
    endif

    if src.dir == bin.dir then
        echo É igual a bin.dir!
    else if src.dir==build.dir then
        echo È igual a build.dir
    else if src.dir=="../src" then
        if bin.dir!="bin/Debug" then
            echo Debug!
        else if    bin.dir == "bin/Debug" then
            echo Release!
        else
            echo Not bin debug!
        endif    
    else 
        echo Não é igual a nenhum!
    endif
endtask
